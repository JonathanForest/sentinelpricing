name: Test and Deploy to PyPI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Run tests with tox for Python ${{ matrix.python-version }}
        # Option 1: If your tox environments are named to match the python version (e.g., py38, py39)
        # run: tox -e py${{ matrix.python-version }}  # Adjust accordingly if your env names differ

        # Option 2: Let tox auto-detect the available interpreter and skip missing ones.
        run: tox --skip-missing-interpreters

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: prod
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python for deployment
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Use a single version for building/deployment

      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distributions
        run: python -m build --sdist --wheel .

      - name: Publish to Test PyPI
        run: twine upload --verbose --repository testpypi dist/*
        env:
          TWINE_USERNAME: '__token__'
          TWINE_PASSWORD: ${{ secrets.PYPI }}
